<?php

/**
 * PluginCheckInTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginCheckInTable extends Doctrine_Table
{
  const PUBLIC_FLAG_OPEN    = 4;
  const PUBLIC_FLAG_SNS     = 3;
  const PUBLIC_FLAG_FRIEND  = 2;
  const PUBLIC_FLAG_PRIVATE = 1;

  protected static $publicFlags = array(
    self::PUBLIC_FLAG_OPEN    => 'All Users on the Web',
    self::PUBLIC_FLAG_SNS     => 'All Members',
    self::PUBLIC_FLAG_FRIEND  => '%my_friend%',
    self::PUBLIC_FLAG_PRIVATE => 'Private',
  );
  
 /**
  * list of all available public flags
  * @access public
  * @return array
  */
  public function getPublicFlags()
  {
    if (!sfConfig::get('app_op_checkin_plugin_is_open', true))
    {
      unset(self::$publicFlags[self::PUBLIC_FLAG_OPEN]);
    }

    $publicFlags = array();

    $i18n = sfContext::getInstance()->getI18N();
    $termMyFriend = Doctrine::getTable('SnsTerm')->get('my_friend');

    foreach (self::$publicFlags as $key => $publicFlag)
    {
      $terms = array('%my_friend%' => $termMyFriend->pluralize()->titleize());
      $publicFlags[$key] = $i18n->__($publicFlag, $terms, 'publicFlags');
    }

    return $publicFlags;
  }


 /**
  * pager for specified member
  * @access public
  * @param integer $memberId  target member id
  * @param integer $size limit of pager
  * @param integer $page current page
  * @param mixed $currentMemberId  integer or null if alian
  * @return object sfDoctrinePager
  */
  public function getMemberPager($memberId, $size, $page, $currentMemberId)
  {
    $query = $this->createQuery('c')->addWhere('c.member_id = ?', $memberId)->orderBy('c.created_at DESC');
    
    $minPublicFlag = $this->getMinPublicFlag($memberId, $currentMemberId);
    $query->addWhere('c.public_flag >= ?', $minPublicFlag);
    
    return $this->generatePager($query, $size, $page);
  }

 /**
  * pager for specified spot
  * @access public
  * @param integer $spotId  target spot id
  * @param integer $size limit of pager
  * @param integer $page current page
  * @param mixed $currentMemberId  integer or null if alian
  * @return object sfDoctrinePager
  */
  public function getSpotPager($memberId, $size, $page, $publicFlag = self::PUBLIC_FLAG_SNS)
  {
    $query = $this->createQuery('c')->addWhere('c.check_in_spot_id = ?', $spotId)->addWhere('c.public_flag >= ?', $publicFlag)->orderBy('c.created_at DESC');
    
    return $this->generatePager($query, $size, $page);
  }
  
 /**
  * generates a pager for specified query
  * @access protected
  * @param Doctrine_Query $query a query
  * @param integer $size limit of pager
  * @param integer $page current page
  * @retrn object sfDoctrinePager
  */
  protected function generatePager(Doctrine_Query $query, $size, $page)
  {
    $pager = new sfDoctrinePager('CheckIn', $size);
    $pager->setQuery($query);
    $pager->setPage($page);
    $pager->init();
    
    return $pager;
  }
  
 /**
  * get min public-flag for current member
  * @access public
  * @param integer $targetMemberId  id of a member who owns target content
  * @param mixed $currentMemberId  current member id, or null if alian
  */
  public function getMinPublicFlag($targetMemberId, $currentMemberId)
  {
    if($targetMemberId == $currentMemberId)
    {
      return self::PUBLIC_FLAG_PRIVATE;
    }
    if(null == $currentMemberId)
    {
      return self::PUBLIC_FLAG_OPEN;
    }
    
    $relation = null;
    $relation = Doctrine::getTable('MemberRelationship')->retrieveByFromAndTo($targetMemberId, $currentMemberId);
    
    if($relation)
    {
      if($relation->getIsAccessBlock())
      {
        return 9;
      }
      elseif($relation->getIsFriend())
      {
        return self::PUBLIC_FLAG_FRIEND;
      }
    }
    return self::PUBLIC_FLAG_SNS;
  }
}